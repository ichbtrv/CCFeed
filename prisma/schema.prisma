// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Note: We used `sqlite` to minimize configuration, but you can switch this to
// any db that Prisma supports. In production, we recommend PostgreSQL
//
// Breakdown of DB options and features for Prisma.io:
// https://www.prisma.io/docs/reference/database-reference/database-features
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Everything from here down is copy-pasted from the recommended schema from the
// NextAuth docs
//
// Next-Auth Prisma adapter docs: https://next-auth.js.org/adapters/prisma
generator client {
  provider        = "prisma-client-js"
  
}



model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts          Post[]

}
model Post {
  id              String  @id  @default(cuid())
  published Boolean @default(true)
  title           String
  content         String?
  showContent Boolean @default(true)
  mediaContentUrl String? @default("https://res.cloudinary.com/dorofetal/video/upload/v1640515299/my_video.mov")
  author          User?    @relation(fields: [authorId], references: [id])
  authorId        String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  

}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
